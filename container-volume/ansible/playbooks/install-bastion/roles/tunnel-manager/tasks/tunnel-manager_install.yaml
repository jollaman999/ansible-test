- name: Copy tunnel-manager binary
  include_tasks: send_file.yaml
  vars:
    input_file_path: "{{ role_path }}/bin/tunnel-manager"
    output_file_path: "/usr/bin/tunnel-manager"
    output_file_owner: "root"
    output_file_group: "root"
    output_file_chmod: "755"

- name: Generating config.yaml
  template:
    src: "config/config.yaml.j2"
    dest: "/tmp/config.yaml"
  delegate_to: 127.0.0.1

- name: Copy config.yaml
  include_tasks: send_file.yaml
  vars:
    input_file_path: "/tmp/config.yaml"
    output_file_path: "/etc/tunnel-manager/config.yaml"
    output_file_owner: "root"
    output_file_group: "root"
    output_file_chmod: "644"

- name: Remove temporary config.yaml
  ansible.builtin.file:
    path: "/tmp/config.yaml"
    state: absent
  delegate_to: 127.0.0.1

- name: Copy tunnel-manager service file
  include_tasks: send_file.yaml
  vars:
    input_file_path: "{{ role_path }}/tunnel-manager/systemd/tunnel-manager.service"
    output_file_path: "/lib/systemd/system/tunnel-manager.service"
    output_file_owner: "root"
    output_file_group: "root"
    output_file_chmod: "644"

- name: Reload systemctl daemon
  become: true
  become_method: sudo
  become_user: root
  vars:
    ansible_connection: ssh
    ansible_host: "{{ bastion_host }}"
    ansible_port: "{{ bastion_port }}"
    ansible_user: "{{ bastion_user }}"
    ansible_password: "{{ bastion_password }}"
    ansible_become_password: "{{ bastion_password }}"
  raw: "systemctl daemon-reload"

- name: Restart tunnel-manager service
  become: true
  become_method: sudo
  become_user: root
  vars:
    ansible_connection: ssh
    ansible_host: "{{ bastion_host }}"
    ansible_port: "{{ bastion_port }}"
    ansible_user: "{{ bastion_user }}"
    ansible_password: "{{ bastion_password }}"
    ansible_become_password: "{{ bastion_password }}"
  raw: "systemctl restart tunnel-manager"

- name: Run tunnel-manager status command
  become: true
  become_method: sudo
  become_user: root
  vars:
    ansible_connection: ssh
    ansible_host: "{{ bastion_host }}"
    ansible_port: "{{ bastion_port }}"
    ansible_user: "{{ bastion_user }}"
    ansible_password: "{{ bastion_password }}"
    ansible_become_password: "{{ bastion_password }}"
  raw: "systemctl status --no-pager tunnel-manager"
  register: tunnel_manager_status
  failed_when: tunnel-manager_status.rc not in [0, 3]

- name: Display tunnel_manager status
  debug:
    var: tunnel-manager_status
